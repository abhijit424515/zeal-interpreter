**PROCEDURE: main
	Return Type: <void>
	Formal Parameters:
**BEGIN: Abstract Syntax Tree 
         Read: Name : a_<int>
         Read: Name : b_<int>
         Read: Name : c_<int>
         Read: Name : d_<int>
         Asgn:
           LHS (Name : res_<int>)
           RHS (
                 Condition: OR<bool>
                   L_Opd (
                     Condition: GE<bool>
                       L_Opd (Name : a_<int>)
                       R_Opd (Name : b_<int>))
                   R_Opd (
                     Condition: NOT<bool>
                       L_Opd (
                         Condition: AND<bool>
                           L_Opd (
                             Condition: GT<bool>
                               L_Opd (Name : a_<int>)
                               R_Opd (Num : 8<int>))
                           R_Opd (
                             Condition: LT<bool>
                               L_Opd (Name : b_<int>)
                               R_Opd (Num : 4<int>))))
                 True_Part (
                       Condition: GT<bool>
                         L_Opd (
                           Arith: Mult<int>
                             L_Opd (Name : c_<int>)
                             R_Opd (
                               Arith: Uminus<int>
                                 L_Opd (Name : d_<int>)))
                         R_Opd (Num : 10<int>)
                       True_Part (
                         Arith: Plus<int>
                           L_Opd (Name : a_<int>)
                           R_Opd (Name : b_<int>))
                       False_Part (
                         Arith: Minus<int>
                           L_Opd (Name : b_<int>)
                           R_Opd (Name : a_<int>)))
                 False_Part (Num : 35<int>))
         Write: Name : res_<int>
**END: Abstract Syntax Tree 
