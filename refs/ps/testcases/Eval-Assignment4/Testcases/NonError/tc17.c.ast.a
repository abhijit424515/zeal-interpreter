**PROCEDURE: main
Return Type: <void>
Formal Parameters:
**BEGIN: Abstract Syntax Tree
Asgn: 
LHS (Name : a_<int>)
RHS(Num : 200<int>)
Asgn: 
LHS (Name : b_<int>)
RHS(Num : 300<int>)
Read: Name : c_<int>
Asgn: 
LHS (Name : c_<int>)
RHS(
Arith: Div <int>
L_Opd (Name : a_<int>) 
R_Opd (Name : b_<int>))
While:
 Condition (
Condition: OR<bool>
L_Opd (
Condition: AND<bool>
L_Opd (
Condition: GT<bool>
L_Opd (Name : c_<int>) 
R_Opd (Num : 105<int>)) 
R_Opd (
Condition: EQ<bool>
L_Opd (Name : a_<int>) 
R_Opd (Num : 1<int>))) 
R_Opd (
Condition: AND<bool>
L_Opd (
Condition: LE<bool>
L_Opd (Name : b_<int>) 
R_Opd (Num : 2<int>)) 
R_Opd (
Condition: GE<bool>
L_Opd (Name : c_<int>) 
R_Opd (Num : 3<int>))))
 Body (
Asgn: 
LHS (Name : a_<int>)
RHS(
Arith: Minus <int>
L_Opd (Name : a_<int>) 
R_Opd (
Arith: Div <int>
L_Opd (Name : c_<int>) 
R_Opd (Name : a_<int>)))
Write: Name : a_<int>
Asgn: 
LHS (Name : c_<int>)
RHS(
Arith: Minus <int>
L_Opd (Name : c_<int>) 
R_Opd (Num : 1<int>)))
Write: Name : c_<int>
**END: Abstract Syntax Tree