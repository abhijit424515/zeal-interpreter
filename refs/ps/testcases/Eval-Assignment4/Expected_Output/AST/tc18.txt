**PROCEDURE: main
	Return Type: <void>
	Formal Parameters:
**BEGIN: Abstract Syntax Tree 
         Asgn:
           LHS (Name : a_<int>)
           RHS (Num : 200<int>)
         Asgn:
           LHS (Name : b_<int>)
           RHS (Num : 300<int>)
         Read: Name : c_<int>
         Asgn:
           LHS (Name : c_<int>)
           RHS (
             Arith: Div<int>
               L_Opd (Name : a_<int>)
               R_Opd (Name : b_<int>))
         Do:
           Body (
             Do:
               Body (
                 Write: Name : a_<int>
                 If: 
                   Condition (
                     Condition: GT<bool>
                       L_Opd (Name : c_<int>)
                       R_Opd (Num : 105<int>))
                   Then (
                     Asgn:
                       LHS (Name : a_<int>)
                       RHS (
                         Arith: Minus<int>
                           L_Opd (Name : a_<int>)
                           R_Opd (
                             Arith: Div<int>
                               L_Opd (Name : c_<int>)
                               R_Opd (Name : a_<int>))))
                   Else (
                     Asgn:
                       LHS (Name : b_<int>)
                       RHS (
                         Arith: Minus<int>
                           L_Opd (Name : b_<int>)
                           R_Opd (
                             Arith: Div<int>
                               L_Opd (Name : c_<int>)
                               R_Opd (Name : b_<int>)))
                     Do:
                       Body (
                         Write: Name : c_<int>)
                       While Condition (
                         Condition: LT<bool>
                           L_Opd (Name : c_<int>)
                           R_Opd (Num : 105<int>))))
               While Condition (
                 Condition: LT<bool>
                   L_Opd (Num : 0<int>)
                   R_Opd (Num : 0<int>)))
           While Condition (
             Condition: OR<bool>
               L_Opd (
                 Condition: AND<bool>
                   L_Opd (
                     Condition: GT<bool>
                       L_Opd (Name : c_<int>)
                       R_Opd (Num : 105<int>))
                   R_Opd (
                     Condition: EQ<bool>
                       L_Opd (Name : a_<int>)
                       R_Opd (Num : 1<int>)))
               R_Opd (
                 Condition: AND<bool>
                   L_Opd (
                     Condition: LE<bool>
                       L_Opd (Name : b_<int>)
                       R_Opd (Num : 2<int>))
                   R_Opd (
                     Condition: GE<bool>
                       L_Opd (Name : c_<int>)
                       R_Opd (Num : 3<int>))))
         Write: Name : c_<int>
**END: Abstract Syntax Tree 
