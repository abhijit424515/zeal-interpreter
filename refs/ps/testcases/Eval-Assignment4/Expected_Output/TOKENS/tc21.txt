	Token Name: VOID 	Lexeme: void 	 Lineno: 1
	Token Name: NAME 	Lexeme: main 	 Lineno: 1
	Token Name: LEFT_ROUND_BRACKET 	Lexeme: ( 	 Lineno: 1
	Token Name: RIGHT_ROUND_BRACKET 	Lexeme: ) 	 Lineno: 1
	Token Name: LEFT_CURLY_BRACKET 	Lexeme: { 	 Lineno: 1
	Token Name: INTEGER 	Lexeme: int 	 Lineno: 2
	Token Name: NAME 	Lexeme: a 	 Lineno: 2
	Token Name: COMMA 	Lexeme: , 	 Lineno: 2
	Token Name: NAME 	Lexeme: b 	 Lineno: 2
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 2
	Token Name: NAME 	Lexeme: a 	 Lineno: 3
	Token Name: ASSIGN_OP 	Lexeme: = 	 Lineno: 3
	Token Name: INT_NUM 	Lexeme: 10 	 Lineno: 3
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 3
	Token Name: WHILE 	Lexeme: while 	 Lineno: 4
	Token Name: LEFT_ROUND_BRACKET 	Lexeme: ( 	 Lineno: 4
	Token Name: NAME 	Lexeme: a 	 Lineno: 4
	Token Name: GREATER_THAN 	Lexeme: > 	 Lineno: 4
	Token Name: INT_NUM 	Lexeme: 0 	 Lineno: 4
	Token Name: RIGHT_ROUND_BRACKET 	Lexeme: ) 	 Lineno: 4
	Token Name: LEFT_CURLY_BRACKET 	Lexeme: { 	 Lineno: 4
	Token Name: WRITE 	Lexeme: print 	 Lineno: 5
	Token Name: NAME 	Lexeme: a 	 Lineno: 5
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 5
	Token Name: NAME 	Lexeme: a 	 Lineno: 6
	Token Name: ASSIGN_OP 	Lexeme: = 	 Lineno: 6
	Token Name: NAME 	Lexeme: a 	 Lineno: 6
	Token Name: MINUS 	Lexeme: - 	 Lineno: 6
	Token Name: INT_NUM 	Lexeme: 1 	 Lineno: 6
	Token Name: SEMICOLON 	Lexeme: ; 	 Lineno: 6
	Token Name: RIGHT_CURLY_BRACKET 	Lexeme: } 	 Lineno: 7
	Token Name: RIGHT_CURLY_BRACKET 	Lexeme: } 	 Lineno: 8
